<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="dao.UserMapper">

    <!-- 代表结果集和对象的映射关系 resultMapping
           type:映射对应的类型是谁?
           id:给这个映射关系起一个名字;

    -->
    <resultMap id="User" type="user_mapping">
        <!-- id/result都可以用来映射列到属性,
            id一般用于主键;
            result一般用于非主键字段
        -->
        <id column="id" property="id"/>
        <result column="name" property="name"/>
        <result column="email" property="email"/>
        <result column="age" property="age"/>
        <result column="borndate" property="bornDate"/>


    </resultMap>

    <!--
        keyColumn:主键的列
        keyProperty:主键对应的属性
        usreGeneratedKeys:true(使用数据库自动生成的主键id值设置到对象的OID中)
        parameterType:参数的类型
    -->

    <!-- parameterType="com.xmg.mybatis.domain.User" 在mybatis-config 有alias标签-->
    <insert id="add" keyColumn="id" keyProperty="id" useGeneratedKeys="true" parameterType="User">
        INSERT INTO user (name,email,age,borndate) VALUE (#{name},#{email},#{age},#{bornDate})
    </insert>

    <!-- 修改 -->
    <update id="update" parameterType="com.xmg.mybatis.domain.User">
        UPDATE user
        <set>
            <if test="name=null">
              name=#{name},
            </if>
            <if test="email=null">
              email=#{email},
            </if>
            age=#{age},
            <if test="bornDate!=null">
              bornadate=#{borndate}
            </if>
            </set>
        WHERE id=#{id}
    </update>

    <!-- 抽取colum -->
    <sql id="user_column">
        id,name,email,age,borndate
    </sql>

    <!-- get
       注意,一个SQL元素只能有一个resultMap或者一个resultType
    -->
    <select id="get" parameterType="long" resultMap="user_mapping">
        SELECT
        <include refid="user_column"/>
        FROM user WHERE id = #{id}
    </select>

    <!-- delete -->
    <delete id="delete" parameterType="long">
        DELETE FROM user WHERE id=#{id}
    </delete>

    <!-- list -->
    <select id="list" resultMap="user_mapping">
        SELECT id,name,email,age,borndate FROM user
        <!--
        <where>
            age INTO
            <foreach collection="ages" close=")" item="age" open="(" separator=",">
                #{age}
            </foreach>
        </where>
        WHERE age in(1,2,3)
        -->

        <!--
            prefix:在内容前面加prefix的内容;
            prefixOverrides:如果内容开头匹配设置的值,就去掉这个值
            suffix:在内容结尾加suffix的内容;
            suffixOverrides:如果内容结尾匹配设置的值,就去掉这个值

        <trim prefix="" prefixOverrides="" suffix="" suffixOverrides="">

        </trim>
        -->
    </select>

    <select id="login" parameterType="hashmap" resultMap="user_mapping">
        SELECT <include refid="user_column"/>
        from user
        WHERE name=#{username} and email=#{password}
    </select>


</mapper>
